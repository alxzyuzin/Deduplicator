<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="btnAddFolder.Content" xml:space="preserve">
    <value>Add folder</value>
  </data>
  <data name="btnCancelSearch.Content" xml:space="preserve">
    <value>Cancel search</value>
  </data>
  <data name="btnDelFolder.Content" xml:space="preserve">
    <value>Delete selected folders</value>
  </data>
  <data name="btnDelSelectedFiles.Content" xml:space="preserve">
    <value>Delete selected files</value>
  </data>
  <data name="btnSaveSettings.Content" xml:space="preserve">
    <value>Save settings</value>
  </data>
  <data name="btnSearchLocation.Content" xml:space="preserve">
    <value>Where to search</value>
  </data>
  <data name="btnSearchOptions.Content" xml:space="preserve">
    <value>Search options</value>
  </data>
  <data name="btnSearchResults.Content" xml:space="preserve">
    <value>Search results</value>
  </data>
  <data name="btnSettings.Content" xml:space="preserve">
    <value>Settings</value>
  </data>
  <data name="btnStartSearch.Content" xml:space="preserve">
    <value>Start search</value>
  </data>
  <data name="CanNotLoadPage" xml:space="preserve">
    <value>Cannot load {0} page.  Make sure root of input section markup has x:Name of 'WorkArea"</value>
  </data>
  <data name="DuplicatedAlreadyFound" xml:space="preserve">
    <value>You already have found duplicates.
Would you like to clear search results and start new search?</value>
  </data>
  <data name="FolderRemoved" xml:space="preserve">
    <value>{0}

Perhaps folder was removed.
You must delete this folder from folder list before start search duplicates.</value>
  </data>
  <data name="LayoutRootNotFound" xml:space="preserve">
    <value>Cannot load page.
Make sure root tag in the '{0}' file has an x:Name of 'LayoutRoot'".</value>
  </data>
  <data name="NoFileCompareAttributesChecked" xml:space="preserve">
    <value>You have to check at least one file compare attribute on 'Search options' page to start search duplicates.</value>
  </data>
  <data name="SearchCompletedWithDuplicates" xml:space="preserve">
    <value>Search completed. Found {0} duplicates in {1} groups.</value>
  </data>
  <data name="SearchCompletedWithNoDuplicates" xml:space="preserve">
    <value>Search completed. No duplicated files found.</value>
  </data>
  <data name="SinglePrimaryDirectory" xml:space="preserve">
    <value>Directory list contain only one primary directory.
If you set directory as primary, you have add at least one additional directory to the directory list.</value>
  </data>
  <data name="Unknown error" xml:space="preserve">
    <value>Unknown error {0}

</value>
  </data>
</root>